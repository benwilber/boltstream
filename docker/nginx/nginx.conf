worker_processes auto;

include /usr/local/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" $request_time';
    aio					on;
    sendfile			on;
    tcp_nopush			on;
    tcp_nodelay			on;
    keepalive_timeout 	65;

    types_hash_max_size			2048;
    variables_hash_max_size		4096;
    client_max_body_size 		0;
    default_type				application/octet-stream;
    resolver					127.0.0.1 valid=300s;

    real_ip_header 		X-Forwarded-For;
    real_ip_recursive 	on;
    set_real_ip_from 	127.0.0.1;
    set_real_ip_from 	10.0.0.0/8;

    server {
		server_name 	_;
        listen 			8080;
        root 			${WEB_ROOT};

        add_header		Access-Control-Allow-Origin "http://${APP_HOST}";
        add_header		Access-Control-Allow-Methods "GET,HEAD,OPTIONS";
        add_header		Access-Control-Allow-Credentials "true";

        proxy_set_header	Host $http_host;
        expires 			-1d;

        set $rtmp_secret			"${RTMP_SECRET}";

        location = /health {
            default_type text/plain;
            return 200 "OK\n$hostname\n";
        }

        location = /authorize {
            internal;

            set_hmac_sha1 $sig $rtmp_secret "$cookie_sessionid $stream_uuid";

            if ($http_authorization) {
                set_hmac_sha1 $sig $rtmp_secret "$http_authorization $stream_uuid";
            }

            set_encode_base64 $sig $sig;

            if ($sig != $user_sig) {
                return 403;
            }

            proxy_set_header X-RTMP-Secret $rtmp_secret;
            proxy_pass http://${UPSTREAM_SERVER}/api/v1/authorize/$stream_uuid;
        }

        location ~ ^/keys/([^/]+)/[0-9]+\.key$ {
            set $stream_uuid $1;
            set $user_sig $arg_s;
            auth_request /authorize;
        }

        location ~ ^/live/([^/]+)/index\.m3u8$ {
            set $stream_uuid $1;
            set_hmac_sha1 $sig $rtmp_secret "$cookie_sessionid $stream_uuid";

            if ($http_authorization) {
                set_hmac_sha1 $sig $rtmp_secret "$http_authorization $stream_uuid";
            }

            set_encode_base64 $sig $sig;
            subs_filter_types		application/vnd.apple.mpegurl;
            subs_filter				"URI=\"/keys/([^/]+)/([0-9]+)\.key\"" "URI=\"/keys/$1/$2.key?s=$sig\"" gr;
        }

        location ~ ^/live/[^/]+/[0-9]+\.ts$ {
            expires ${PLAYLIST_SECONDS}s;
        }

        location ~ ^/live/([^/]+)/preview\.mp4$ {
            mp4;
            expires 10s;
            alias "${WEB_ROOT}/record/$1_thumb.mp4";
        }

        location ~ ^/live/([^/]+)/preview\.jpg$ {
            set $stream_uuid 	$1;
            set $size 			"";
            set $seek 			1000;
            if ($arg_width) {
                set $size 		"$size-w$arg_width";
            }
            if ($arg_height) {
                set $size 		"$size-h$arg_height";
            }
            if ($arg_seek) {
                set $seek 		"$arg_seek";
            }
            expires 10s;
            rewrite ^ /record/${stream_uuid}_thumb.mp4/thumb-$seek$size.jpg last;
        }

        location ~ ^/record/[^/]+/(.+)$ {
            internal;
            vod 			thumb;
            vod_mode 		local;
            expires 		10s;
            error_page 		404 =200 /record/default_preview.mp4/$1;
        }

		location ~ ^/vod/([^/]+)/.+\.(m3u8|ts)$ {
			vod_mode 		local;
			vod 			hls;
			vod_base_url 	"";
		}

        location = /offline.mp4 {
            mp4;
            expires max;
        }

        location /static/ {
            expires max;
        }

        location / {
            expires off;
            proxy_pass http://${UPSTREAM_SERVER}/;
        }
    }

}


